from datetime import datetime as dt
from collections import namedtuple
class Position(namedtuple('Position', ['y', 'x'])):
    def __add__(self, othr):
        return Position(self.y+othr.y, self.x+othr.x)


def a_star_rpg_move(start, goal, world):
    curnode = a_star_node(start, goal, 0)

    openlist = [curnode]

    while openlist[-1].cost <= len(world) * len(world[0]):
        openlist.sort(key = lambda x:x.cost + x.heuristic, reverse = True)
        curnode = openlist.pop()

        if curnode.pos == goal:
            break
        
        for vec in (Position(0,1),Position(-1,0),Position(1,0),Position(0,-1)):
            pos = curnode.pos + vec
            if (pos not in [n.pos for n in openlist] and
                world[pos.y][pos.x] != 1):
                nxtnode = a_star_node(pos, goal, curnode.cost + 1, curnode)
                openlist.append(nxtnode)

    path = []
    while curnode.post != None:
        path.append(curnode.pos)
        curnode = curnode.post

    path.append(curnode.pos)
    path.reverse()
    return path


class a_star_node(object):
    def __init__(self, pos, goal, cost, post=None):
        self.pos = pos
        self.post = post
        self.cost = cost
        self.heuristic = abs(goal.x - pos.x) + abs(goal.y - pos.y)

    def __repr__(self):
        return "<A Star Node (%s, %s),c:%s,h:%s>" % (self.pos.x, self.pos.y, self.cost, self.heuristic)



start = Position(1, 1)
goal = Position(1, 95)
world = """1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
1000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"""

# world = """11111111111111111111
# 10010000000001000001
# 10010001000001000001
# 10010001000001000001
# 10010001000001000001
# 10010001000001000001
# 10000001000000000001
# 11111111111111111111
# """
world = [map(int, list(line)) for line in world.split("\n")]

print(dt.now())
path = a_star_rpg_move(start, goal, world)
print(dt.now())
for n in path:
    world[n.y][n.x] = "*"
    
str = "\n".join(["".join(map(str, l)) for l in world])
#print(str)